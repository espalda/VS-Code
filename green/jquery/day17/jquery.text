* 자바스크립트 라이브러리 *
$(선택자).이벤트함수명(); - 함수 호출
$(선택자).이벤트함수명(function(){ 익명 함수 사용 - 함수 등록
$(선택자)함수명(함수1);
function함수1();

* seletor *
클래스 선택자 : .클래스
아이디 선택자 : #아이디
태그 선택자 : 태그명
자식 관계 : 선택자1 > 선택자2
자손 관계 : 선택자1 선택자2
자기 자신 : 선택자1선택자2

태그 선택자는 2개가 같이 올 수 없다.
한 개체가 2개의 태그를 동시에 포함될수 없기 때문에 divdiv(x), divp(x), div.logodiv(x)
아이디도 2개가 같이 올 수 없다.
한 태그가 id를 2개 이상 가질수 없기 때문에 #logo#naver(x), #logo.logo#naver(x)

[순서]
1. jquery
2. 부트스트랩 관련 js
3. 가져다쓰는 플러그인
4. 모든 페이지 공통 js
5. 현재 페이지 js

$().prop('속성명');	=> 속성을 가져온다. getter
$().prop('속성명','값'); => 속성에 값을 설정한다. setter
$().val(); =>input, select 태그의 value 값만 가져올수 있다.
$().val('값'); =>value 값을 '값'으로 설정한다.

$(selector).hide(speed -time, callback -function);

[function]
해당 요소의 이벤트를 강제로 실행
		$('선택자').이벤트함수();
해다 요소의 이벤트 실행시 동작 코드를 등록
		$('선택자').이벤트함수(function(){
		});

함수는 특정 기능을 하도록 모아놓은 코드
		- 유지보수가 쉽도록
		- 함수의 재사용을 통해 코드의 중복을 제거
	함수		vs 		음료수 자판기
	매개변수			돈, 메뉴
	리턴타입			음료수

	함수 선언 방법1
	//함수 호출
	함수명(매개변수들);

	//함수 선언
	function 함수명(매개변수들){
		구현;
	}
	- 위 방법은 함수 선언과 호출 순서가 바뀌어도 문제가 안됨


	함수 선언 방법2
	//함수 호출
	함수명(매개변수들);//에러
	//함수 선언
	var 함수명 = function (매개변수들){
		구현;
	}
	- 위 방법은 함수 선언 후 호출을 해야한다. 순서가 바뀌면 에러가 남


[method]
기본형
$('선택자').메소드명();
해당 메소드의 값을 가져옴.
		$('선택자').val();
해당 메서드의 값을 값1로 설정
		$('선택자').val('값1');
해당 속성의 값을 가져옴
		$('선택자').prop(속성명);
해당 속성의 값을 값1로 설정
		$('선택자').prop(속성jk명,값1);

[]
append와 prepend는 해당 셀렉터를 기준으로 셀렉터 안에서 자식 태그를 추가
$('p').append(++cnt,' : 안녕하세요 <br>');	=>$(셀렉터).append(코드) - 셀렉터의 자식 태그를 뒤쪽에 추가(객체 또는 문자열)
var str = '<span>'+ ++cnt+' : 안녕하세요.</span><br>'
$(str).appendTo('p');	=>$(코드).appendTo('셀렉터') - 셀렉터의 자식 태그를 뒤쪽에 추가(To는 코드가 태그로 감싸져 있어야 한다)
$(str).prependTo('p');	=>$(코드).prependTo('셀렉터') - 셀렉터의 자식 태그를 앞쪽에 추가(To는 코드가 태그로 감싸져 있어야 한다)
});
$('#p').click(function(){
var obj = document.createElement('p');	//createElement를 통해 태그 객체를 생성해서 변수에 저장한다
$('body').append(obj);	=>해당 셀렉터의 뒤쪽에 자식 태그(객체 또는 문자열)를 추가
$('body').prepend(obj);	=>해당 셀렉터의 앞쪽에 자식 태그(객체 또는 문자열)를 추가

[부모]
$('span').parent().addClass('red');		=>span tag의 부모에 red class 추가
[조상]
$('span').parents().addClass('red');	=>span tag의 조상들에 red class 추가
$('span').parents('p').addClass('red');	=>span tag의 조상중에 p tag 만 red class 추가
$('span').parents('p, body').addClass('red');	=>span tag 의 조상중에 p tag와 body tag에 red class 추가
$('span').parentsUntil('body').addClass('red'); =>span tag의 조상중에서 body tag 전까지만 red class 추가

[자식]
$('body').children().addClass('red'); =>body tag에 자식들에게 red class 추가
$('body').children('div').addClass('red'); =>body tag의 자식들 중에서 div 태그들만 red class 추가
[자손]
$('body').find('h1').addClass('red'); =>body tag의 자손들 중에서 h1 태그들만 red class 추가
$('body').find('h1,.abc').addClass('red'); =>body tag의 자손들 중에서 h1 태그들만 red class 추가

[형제]
siblings() = 같은 부모를 가진 형제 태그 전체 선택
siblings(a,b) = 같은 부모를 가진 태그 중 a와 b태그들만 선택
$('h1').siblings().addClass('blue');	=>h1태그를 제외한 h1태그의 형제들(부모가 같은 태그들)을 전부 선택
$('div').siblings().addClass('blue');	=>div태그들을 제외한 div태그의 형제들을 전부 선택(div태그들만 border-color가 그대로)
$('div').siblings('h1').addClass('blue');	=>div태그와 같은 부모를 가지는 태그 중에서 h1태그들만 선택
$('div').next().addClass('blue');	=>해당 div 형제 중에서 본인의 바로 다음 태그 하나만 선택
$('div').prev().addClass('blue');	=>해당 div 형제 중에서 본인의 바로 이전 태그 하나만 선택
$('div').nextAll().addClass('blue');	=>해당 div 형제 중에서 본인의 다음 태그들 전부 선택
$('div').nextAll('p').addClass('blue');	=>해당 div태그의 다음 형제 태그들 중에서 해당 셀렉터들만 전체 선택

[기능]
$('div').click(); =>div 태그를 클릭한걸 강제 실행
$('div').first().addClass('blue'); =>div 요소들 중에서 첫번째 요소에 클래스 추가
$('div').last().addClass('blue'); =>div 요소들 중에서 마지막 요소에 클래스 추가
$('div').eq(2).addClass('blue'); =>div 요소들 중에서 2번지 요소(번지는 0번지부터 시작, 즉 3번째)에 클래스 추가
$('div').filter('#one').addClass('blue'); =>div 요소들 중에서 id가 one인 요소에 클래스 추가
$('div#one').addClass('blue');
나머지 요소들에 blue 클래스 추가
$('div').not('#one').addClass('blue');
div요소에 부모가 body 태그인지에 대한 결과를 true, false로 출력
alert($('div').parent().is('body'));

$().val() input tag의 값을 가져옴
$().val(값) input tag 의 값을 설정함 value of input tag set value;
$().text() 요소의 텍스트를 가져옴
$().text(문자열) 요소의 텍스트를 설정함
$().html() 요소의 html 코드를 가져옴
$().html(문자열) 요소에  html 코드를 설정함